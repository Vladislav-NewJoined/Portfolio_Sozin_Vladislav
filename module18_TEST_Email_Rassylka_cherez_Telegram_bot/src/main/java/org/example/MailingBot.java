package org.example;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.GetFile;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Document;
import org.telegram.telegrambots.meta.api.objects.PhotoSize;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.concurrent.CompletableFuture;

public class MailingBot extends TelegramLongPollingBot {
    private final List<String> emailList = new ArrayList<>();
    private boolean waitingForEmails = false;
    private boolean waitingForSubject = false;
    private boolean waitingForMessage = false;
    private boolean waitingForAttachmentAnswer = false;
    private boolean waitingForAttachment = false;
    private boolean waitingForInlineImageAnswer = false;
    private boolean waitingForInlineImage = false;

    private String emailSubject = "";
    private String emailText = "";
    private File attachment = null;
    private File inlineImage = null;

    private static final int MAX_EMAILS_PER_REQUEST = 100;
    private static final String TEMP_DIR = "temp_files";

    public MailingBot() {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–∞–π–ª–æ–≤
        try {
            Files.createDirectories(Paths.get(TEMP_DIR));
        } catch (IOException e) {
            System.err.println("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: " + e.getMessage());
        }
    }

    @Override
    public String getBotUsername() {
        return "BES_Mailing_bot";
    }

    @Override
    public String getBotToken() {
        return "7658983765:AAFaNCkR8D5O74u-YkMVZyjxuePRXY1NZ64";
    }

    @Override
    public void onUpdateReceived(Update update) {
        System.out.println("–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: " + update);

        if (update.hasMessage()) {
            long chatId = update.getMessage().getChatId();

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–≤–ª–æ–∂–µ–Ω–∏–π)
            if (waitingForAttachment && update.getMessage().hasDocument()) {
                processAttachment(chatId, update.getMessage().getDocument());
                return;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
            if (waitingForInlineImage && update.getMessage().hasPhoto()) {
                processInlineImage(chatId, update.getMessage().getPhoto());
                return;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if (update.getMessage().hasText()) {
                String userInput = update.getMessage().getText();
                System.out.println("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: '" + userInput + "' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chatId: " + chatId);

                try {
                    if ("/start".equals(userInput)) {
                        System.out.println("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start");
                        resetState(chatId);
                        System.out.println("–ö–æ–º–∞–Ω–¥–∞ /start –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
                    } else if (waitingForEmails) {
                        System.out.println("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ email-–∞–¥—Ä–µ—Å–æ–≤");
                        processEmailList(chatId, userInput);
                    } else if (waitingForSubject) {
                        System.out.println("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–º—ã —Å–æ–æ–±—â–µ–Ω–∏—è");
                        processSubject(chatId, userInput);
                    } else if (waitingForMessage) {
                        System.out.println("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è");
                        processMessage(chatId, userInput);
                    } else if (waitingForAttachmentAnswer) {
                        System.out.println("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ –≤–ª–æ–∂–µ–Ω–∏–∏");
                        processAttachmentAnswer(chatId, userInput);
                    } else if (waitingForInlineImageAnswer) {
                        System.out.println("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏");
                        processInlineImageAnswer(chatId, userInput);
                    }
                } catch (Exception e) {
                    System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
                    e.printStackTrace();

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: " + e.getMessage());
                }
            } else if (!waitingForAttachment && !waitingForInlineImage) {
                sendMessage(chatId, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.");
            }
        }
    }

    private void resetState(long chatId) {
        emailList.clear();
        emailSubject = "";
        emailText = "";
        deleteTemporaryFiles();
        attachment = null;
        inlineImage = null;

        waitingForEmails = true;
        waitingForSubject = false;
        waitingForMessage = false;
        waitingForAttachmentAnswer = false;
        waitingForAttachment = false;
        waitingForInlineImageAnswer = false;
        waitingForInlineImage = false;

        sendMessage(chatId, "üì© –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ email-–∞–¥—Ä–µ—Å–æ–≤ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):");
    }

    private void processEmailList(long chatId, String input) {
        String[] emails = input.split("\n");
        for (String email : emails) {
            String trimmedEmail = email.trim();
            if (!trimmedEmail.isEmpty()) {
                emailList.add(trimmedEmail);
            }
        }

        if (emailList.isEmpty()) {
            sendMessage(chatId, "‚ùå –°–ø–∏—Å–æ–∫ email-–∞–¥—Ä–µ—Å–æ–≤ –ø—É—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            return;
        }

        if (emailList.size() > MAX_EMAILS_PER_REQUEST) {
            sendMessage(chatId, String.format(
                    "‚ö†Ô∏è –í—ã –≤–≤–µ–ª–∏ %d –∞–¥—Ä–µ—Å–æ–≤. –õ–∏–º–∏—Ç: %d –∑–∞ —Ä–∞–∑.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–Ω—å—à–µ –∞–¥—Ä–µ—Å–æ–≤.",
                    emailList.size(),
                    MAX_EMAILS_PER_REQUEST
            ));
            emailList.clear();
            return;
        }

        waitingForEmails = false;
        waitingForSubject = true;
        sendMessage(chatId, "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—è:");
    }

    private void processSubject(long chatId, String subject) {
        emailSubject = subject.trim();

        if (emailSubject.isEmpty()) {
            sendMessage(chatId, "‚ö†Ô∏è –¢–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É:");
            return;
        }

        waitingForSubject = false;
        waitingForMessage = true;
        sendMessage(chatId, "‚úçÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:");
    }

    private void processMessage(long chatId, String messageText) {
        emailText = messageText;

        waitingForMessage = false;
        waitingForAttachmentAnswer = true;

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –î–∞/–ù–µ—Ç
        sendMessageWithYesNoKeyboard(chatId, "üìé –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª –∫ —Å–æ–æ–±—â–µ–Ω–∏—é?");
    }

    private void processAttachmentAnswer(long chatId, String answer) {
        waitingForAttachmentAnswer = false;

        if (answer.equalsIgnoreCase("–î–∞")) {
            waitingForAttachment = true;
            sendMessage(chatId, "üì§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫ —Å–æ–æ–±—â–µ–Ω–∏—é.");
        } else {
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
            waitingForInlineImageAnswer = true;
            sendMessageWithYesNoKeyboard(chatId, "üñºÔ∏è –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ç–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è?");
        }
    }

    private void processAttachment(long chatId, Document document) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ Telegram
            org.telegram.telegrambots.meta.api.objects.File telegramFile = execute(new GetFile(document.getFileId()));
            String filePath = telegramFile.getFilePath();

            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            String fileName = document.getFileName();
            if (fileName == null || fileName.isEmpty()) {
                fileName = "attachment_" + System.currentTimeMillis();
            }

            File localFile = new File(TEMP_DIR, fileName);
            downloadFile(telegramFile, localFile);

            attachment = localFile;
            waitingForAttachment = false;
            waitingForAttachment = false;

            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
            waitingForInlineImageAnswer = true;
            sendMessageWithYesNoKeyboard(chatId, "üñºÔ∏è –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ç–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è?");

        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: " + e.getMessage());
            sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ù–µ—Ç' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.");
        }
    }

    private void processInlineImageAnswer(long chatId, String answer) {
        waitingForInlineImageAnswer = false;

        if (answer.equalsIgnoreCase("–î–∞")) {
            waitingForInlineImage = true;
            sendMessage(chatId, "üñºÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –≤ —Ç–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è.");
        } else {
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            sendEmailsToRecipients(chatId);
        }
    }

    private void processInlineImage(long chatId, List<PhotoSize> photos) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ (–ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
            PhotoSize photo = photos.stream()
                    .max(Comparator.comparing(PhotoSize::getFileSize))
                    .orElseThrow(() -> new IllegalStateException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ"));

            // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ Telegram
            org.telegram.telegrambots.meta.api.objects.File telegramFile = execute(new GetFile(photo.getFileId()));
            String filePath = telegramFile.getFilePath();

            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            String fileName = "inline_image_" + System.currentTimeMillis() + ".jpg";
            File localFile = new File(TEMP_DIR, fileName);
            downloadFile(telegramFile, localFile);

            inlineImage = localFile;
            waitingForInlineImage = false;

            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            sendEmailsToRecipients(chatId);

        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: " + e.getMessage());
            sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ù–µ—Ç' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.");
        }
    }

    private void sendEmailsToRecipients(long chatId) {
        sendMessage(chatId, "‚è≥ –ò–¥–µ—Ç —Ä–∞—Å—Å—ã–ª–∫–∞ " + emailList.size() + " –ø–∏—Å–µ–º...");

        SendEmail.sendEmailsAsync(emailList, emailSubject, emailText, attachment, inlineImage)
                .thenRun(() -> {
                    sendMessage(chatId, "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
                    clearState();
                })
                .exceptionally(e -> {
                    sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: " + e.getCause().getMessage());
                    clearState();
                    return null;
                });
    }

    private void clearState() {
        emailList.clear();
        emailSubject = "";
        emailText = "";
        deleteTemporaryFiles();
        attachment = null;
        inlineImage = null;

        waitingForEmails = false;
        waitingForSubject = false;
        waitingForMessage = false;
        waitingForAttachmentAnswer = false;
        waitingForAttachment = false;
        waitingForInlineImageAnswer = false;
        waitingForInlineImage = false;
    }

    private void deleteTemporaryFiles() {
        if (attachment != null && attachment.exists()) {
            attachment.delete();
        }
        if (inlineImage != null && inlineImage.exists()) {
            inlineImage.delete();
        }
    }

    private void sendMessage(long chatId, String text) {
        try {
            execute(SendMessage.builder()
                    .chatId(String.valueOf(chatId))
                    .text(text)
                    .build());
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
        }
    }

    private void sendMessageWithYesNoKeyboard(long chatId, String text) {
        try {
            // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
            keyboardMarkup.setSelective(true);
            keyboardMarkup.setResizeKeyboard(true);
            keyboardMarkup.setOneTimeKeyboard(true);

            // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –∫–Ω–æ–ø–æ–∫
            List<KeyboardRow> keyboard = new ArrayList<>();
            KeyboardRow row = new KeyboardRow();
            row.add(new KeyboardButton("–î–∞"));
            row.add(new KeyboardButton("–ù–µ—Ç"));
            keyboard.add(row);

            keyboardMarkup.setKeyboard(keyboard);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            execute(SendMessage.builder()
                    .chatId(String.valueOf(chatId))
                    .text(text)
                    .replyMarkup(keyboardMarkup)
                    .build());
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: " + e.getMessage());
        }
    }

    @Override
    public void onClosing() {
        deleteTemporaryFiles();
        SendEmail.shutdown();
        super.onClosing();
    }
}
